# -*- coding: utf-8 -*-
"""heart_disease_prediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1apB9jBWXBsP8z1xZOC0dz30sNCrCSulb

# Heart diseses

Importing dependensies
"""

from google.colab import drive
drive.mount('/content/drive')

import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

"""Data Collection and processing"""

# importing the csv data to pandas dataFrame
heart_data = pd.read_csv('/content/drive/MyDrive/data.csv')

# print first 5 rows of the dataset
heart_data.head()

# print last 5 rows of the dataset
heart_data.tail()

# number of rows and columns in the dataset
heart_data.shape #(colum, ligne)

# checking for missing values
heart_data.isnull().sum()

# getting some info about the data
heart_data.info()

# getting some info about the data
heart_data.describe()

""""on doit avoir des nombres egaux de distribution de la data entre les classes,
Si une classe est surdominante (ex : 90% vs 10%), le modèle peut être biaisé (apprendre à toujours prédire la classe majoritaire).
1 --> Defective Heart

0 --> Healthy Heart

# Splitting the Features and Target
"""

# accuracy on test data
X_test_prediction = model.predict(X_test)
test_data_accuracy = accuracy_score(X_test_prediction, Y_test)

X = heart_data.drop(columns='target', axis=1)
Y = heart_data['target']

print(Y)

"""Splitting the Data into Training data & Test Data"""

X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.2, stratify=Y, random_state=2)

print(X.shape, X_train.shape, X_test.shape)

"""Model Training

Logistic Regression
"""

model = LogisticRegression()

# training the LogisticRegression model with Training data
model.fit(X_train, Y_train)

"""Model Evaluation

Model Evaluation
"""

# accuracy on training data
X_train_prediction = model.predict(X_train)
training_data_accuracy = accuracy_score(X_train_prediction, Y_train)

print('Accuracy on Training data : ', training_data_accuracy)

# accuracy on test data
X_test_prediction = model.predict(X_test)
test_data_accuracy = accuracy_score(X_test_prediction, Y_test)

print('Accuracy on Test data : ', test_data_accuracy)

input_data = (62,0,0,140,268,0,0,160,0,3.6,0,2,2)

# change the input data to a numpy array
input_data_as_numpy_array= np.asarray(input_data)

# reshape the numpy array as we are predicting for only on instance
input_data_reshaped = input_data_as_numpy_array.reshape(1,-1)

prediction = model.predict(input_data_reshaped)
print(prediction)

if (prediction[0]== 0):
  print('The Person does not have a Heart Disease')
else:
  print('The Person has Heart Disease')

import seaborn as sns
import matplotlib.pyplot as plt

sns.countplot(x='target', data=heart_data)
plt.title("Distribution des patients (0 = sain, 1 = malade)")
plt.xlabel("Classe cible")
plt.ylabel("Nombre de patients")
plt.show()

plt.figure(figsize=(12,10))
sns.heatmap(heart_data.corr(), annot=True, cmap='coolwarm')
plt.title("Matrice de corrélation entre variables")
plt.show()